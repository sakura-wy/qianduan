h1-h6  p  div 会换行
a b u s strong img  不会换行
ul 无序列表  ol 有序列表  dt 定义列表 dd列表项
转义字符： &nbsp； &copy； 
<br> 换行符标签

表格:
    align 水平居中  table加上是让整个表格在页面中居中
    valign 垂直居中
    cellspacing 单元格与单元格之间的间距
    cellpadding 单元格内部填充
    colspan 跨列合并  删除当前行后面的多余的单元格
    rowspan 跨行合并  删除下面行多余的单元格

层叠样式表  css  
    引入方式 
    1  外部样式表<link rel="stylesheet" href="css/text.css">
    2  内部样式表 <style>
        body{
            background-color:deeppink;
        }</style>
    3   行间样式<body style="background:yellowgreen"></body> 

选择器(id>class>元素)
        1. 元素选择器
        2. id选择器 #名字
            命名规范： 
                不能用中文 以英文开头 不能以数字开头 不能有空格
        3. 类选择器 .类名字
            同一个元素可以有多个类
        优先级 引入 选择器  书写顺序  --》 相同属性覆盖 不同属性叠加

雪碧图  图像拼合技术  
    减少http的请求 加载速度更快

块级元素
    没有设置宽高，默认宽度一整行
    设置宽高 所占据空间 是一整行

行内元素
    默认不可以设置宽高
    所占据的空间 是内容的大小
    可以把多个行内元素 放在同一行

行内块元素
    可以设置宽高 
    所占据的空间  是内容的大小
    可以把多个行内元素 放在同一行

正常文档流
    自上而下的文档渲染模式

浮动
    会脱离正常文档流  但是没有完全脱离
    文字环绕  float: left

浮动造成的问题：
    子元素浮动 父元素高度塌陷
    解决： 1. 父元素加固定高度
           2. 父元素结束标签之前加空的div 设置clear：both
           3. 利用BFC解决 给父元素加overflow:hidden

标准盒模型
        内容content(width) + 边框(border) + 填充(padding) + 外边距(margin)

IE6盒模型
        width == 内容content(自动) + 内填充(padding) + 边框(border)
        box-sizing: border-box / content-box

那些css属性会继承
    line-height
    color
    font

布局：
    1. 正常文档流 主要是 一行一行
    2. 浮动布局  浮动流 主要解决 页面模块  水平排列
    3. 定位 主要是解决 重叠
        固定定位 
                1. 完全脱离文档流
                2. 元素大小会变为内容的实际大小(width/height)来决定
                3. 以浏览器的可视窗口作为参考
        绝对定位
                1. 完全脱离文档流
                2. 元素大小会变为内容的实际大小(width/height)
                3. 如果所有父元素没有定位，就以body的左上角(0,0)作为参考点
                    否则就以最近一个有定位的父元素为参考
        相对定位
                1. 不会脱离正常的文档流
                2. 不会改变元素显示的特性
                3. 以原本正常文档流的位置作为起始参考点
        有定位的元素 层级高
           谁后定位 谁层级高
           z-index 改变层级
                取值范围 -1 到 9999
                值越大， 层级越高  默认0

伪元素选择器 ::before ::after
    必须要设置的属性 content: ''
    清除浮动：
    .clearfix::after{
            content: '';
            display: block;
            height: 0;
            clear: both;
        }

transition 过渡
                1. 过渡属性 all代表所有属性
                2. 过渡时间 s为单位  必须值
                3. 过渡线型  linear匀速  ease由慢到快到慢
                4.等待延迟时间内
                可以有多组 用逗号隔开
                display:none 是没有过渡效果的

/* 给父元素 视距 透视距离 */
            perspective: 600px;
            -webkit-perspective: 600px;

/* 平移 不会脱离文档流 不会影响其他元素 类似于相对定位
                transform: ranslate(x，y)

            transform: translate(0, 100px);
            transform: translateX(100px);
            transform: translateY(100px);
            transform: translateZ(100px);
/*  2d旋转
                rotate(角度deg)
            */
            transform: rotate(30deg);
            /* 3d旋转 */
            transform: rotateX(30deg);
            transform: rotateY(30deg);
            transform: rotateZ(30deg);

            /* 旋转中心的改变 */
            transform-origin: right top;

/*缩放
                transform: scale(x,y);
                1以上是放大 .-1是缩小
            */
            transform: scale(2,2);
            transform: scale(-2,-2);
            transform: scaleX(2);
            transform: scaleY(2);
            transform: scaleZ(2);

/*扭曲*/
            transform: skew(30deg,0);
            transform: skew(0,-30deg);
            transform: skewX(30deg);

动画：
    定义动画规则
    @keyframes 动画名{
        from{
            transform: translateX(0px);
        }

        to{
            transform: translateX(-100%);
        }
    }

    animation:
        name 名 duration时间
        timeing-function 运动  delay 延迟 iteration-count次数 direction方向  fill-mode结束位置  infinite无限次
    
    animation: cloudMove 2s linear  infinite; 
    animation-play-state: paused； 暂停

字体规则：
    @font-face{
        font-family:'myfont';
        src: url();   对应文件 对应div里的编码
    }

响应式布局：
媒体布局：
/* @media 介质 and (尺寸){
            样式
        }*/
        @media screen and (max-width:768px){
            body{
                background-color: rebeccapurple;
            }
            .small{
                display: block;
            }
            .large, .middle{
                display: none;
            }
        }

栅格布局：
        @media screen and (min-width:1200px){
            body{
                background-color: deepskyblue;
            }
            .large{
                display: block;
            }
            .small, .middle{
                display: none;
            }
            .container{
                width: 1190px;
                margin-left: auto;
                margin-right: auto;
            }
            .col-lg-3{
                width: 25%;
                float: left;
            }
        }
弹性布局：
    display: flex;
            /* 主轴对齐(默认水平)*/
            justify-content:center;
            /* 两端对齐 */
            justify-content: space-between;
            /* 分布 */
            justify-content: space-around;
            /* 交叉轴对齐(默认垂直) */
            align-items: flex-start;
            /* 换行 */
            flex-wrap: wrap;
            flex-wrap: wrap-reverse;
            /* 改变主轴方向 */
            flex-direction: row;
            flex-direction: column;
            align-items: center;


javascript 

 /* 弹出 */
 alert('1234') 
 // 输入  取消按钮会返回null
 var imp = prompt('请输入内容');
 alert(imp);

//  确定框  确定返回true 取消返回false
var result = confirm('您确认吗');
alert(result)

// html页面输出
document.write('亲亲')

 // var 变量名[=值]
 // 可以只定义变量名，不赋值 也可以定义变量且赋值 还可以一次定义多个变量，用，隔开
var a;
var c=2, d='helloworld', e='哈哈', f;

// 语法基础 运算符
/* 
字符串   数字  布尔值  undefined  null

引用数据类型 object (数组， 对象， 函数)

typeof 运算符 输出数据类型

*/
var a=10, b = '20', c='hello world', d=true, e=null, g;
// 输出
console.log(a);
console.log(b);
console.log(c);
console.log(d);
console.log(e);
console.log(f);
console.log(g);
console.log(typeof a);

var obj = {};
var obj2 = {
    name: '撞水泥',
    age:20,
    isDie: false,
    eat:function(){
        console.log('张三在吃饭');
    }
};
console.log(obj2.name);
obj2.eat()
obj2.sex = '男'

console.log(obj2.sex)

// 强制数据类型转换  隐式数据类型转换
// parseInt 转成整形数字
// 看第一位是否是一个数字 如果是就提取，碰到不是数字或小数点停止
// 第一位不是数字 直接抛出NaN(Not A Number)
// NaN的数据类型是number

var num  = prompt('请输入值');
console.log(num)
var nums = parseInt(num)
console.log(nums)

// parseFloat 转成浮点型数字  跟int一致
// Number() 转化成数字 如果不全是数字 直接抛出NaN
// Number 特例 Number(null) -- 0  Number(true) -- 1 Number(false) -- 0 Number(undefined) -- NaN

// String 把值转换成字符串
// Boolean 把值转换成布尔值
// 1, 2, '1', 'a' 都是true  0 null undefined NaN '' 都是false

//隐式类型转换
// console.log(1+true) ---> 2

// 算数运算符 + - * / % ++ --
var a=10, b=20, c='5', d='hello world', e='world';
console.log(a+b);
console.log(a+c); // 字符串拼接

// js精度丢失问题   console.log(0.1+0.4) != 0.5

// == 只比较值  === 比较值和类型
// score>60?alert('ok):alert('not ok') ---> score>60 if alert else alert

var score=prompt('请输入成绩');
if (score>60){
    alert('及格万岁')
}else{
    alert('啥也不是')
}
/*
switch(变量){
    case 值1 ： 语句 ；break；
    case 值2 ： 语句 ；break；
    case 值3 ： 语句 ；break；
    case 值4 ： 语句 ；break；
    case 值5 ： 语句 ；break；
    default ： 默认语句 ;
}
*/

// 先验证再循环 先循环再验证
// for while do while
// while 先验证再循环 
var day=1;
while(day<100){
    day++
};

// for 
for(var day=0;day<=9;day++){
    document.write('这是第'+day+'天<br>')
}

//do while 先循环再验证
var ans=false;
do{
    document.write('对不起我错了')
}
while(ans=false)

for(var i=0;i<4;i++){
    for(var k=5;k>=i;k--){
        document.write('&nbsp;')
    }
    for(var j=0;j<5;j++){
        document.write('*')
    }
    document.write('<br>')
}

// 函数
// function 函数名(){}    var fn = function(){} 匿名函数 函数表达式

function show(){
    console.log('我是show')
}
show()

// 函数表达式的调用
var fn = function(){
    console.log('我是fn')
}
fn()

// 短路运算符
// || 找第一个真，找到就返回 如果所有都是假，则返回最后一个

// arguments 类数组 具备数组的长度和下标 没有数组的方法
function show(){
    console.log(arguments);
    console.log(arguments.length);
    console.log(arguments[0]);
}
show(8,5,7,666)

// 数组是连续的存储空间 有序的数据集合 是一种特殊的对象
// 对象表现形式  var arr=new Array(5);
// 字面量表达式  var arr=[];

var arr=new Array('张三','李四','857');
console.log(arr.length);
arr.push('玻璃');  // 返回数组的长度
arr.pop(); // 返回删除值

arr.unshift('柚子'); // 在数组的最前面添加
arr.shift(); // 在数组的最前删除

arr.splice(0, 2); // 从下标开始删除n个  返回删除值组成的数组
arr.splice(1,0, '车子里'); // 从第一个位置添加一个元素  返回空数组
arr.splice(1,1, '樱桃'); // 替换

delete arr[0]; // 删除值 保留位置
arr.reverse(); // 翻转
arr.sort(); // 升序 排列  返回排序后的数组

// concat 不会改变原数组 ，返回一个值，需要把返回值存储起来
var arr2=[1,2,3];
var arr3 = arr.concat(arr2);
console.log(arr, arr2, arr3);

// join 将所有数组元素结合为一个字符串
var str = arr.join();
var str = arr.join('');
var str = arr.join('-');
console.log(str);

// toString  转化为字符串或对数字修改进制
var arr4 = arr.toString();
var num = 25;
num.toString(16);

// slice  截取指定位置之间的值
var arr5 = arr.slice(1);

// forEach  会遍历数组输出值，索引和原数组 跳过空隙
arr.forEach(function(val,index,originArr){
    console.log(val, index, originArr);
})

// 遍历数组  key  in   item   of
for (var i=0; i<arr.length;i++){
    console.log(arr[i]);
}

for (var item of arr){
    console.log(item);
}

for (var key in arr){
    console.log(key);
    console.log(arr[key]);
}

// Math对象
console.log(Math.PI)  // 圆周率
console.log(Math.round(5.4)) // 四舍五入
console.log(Math.floor(5.5)) // 向下取整
console.log(Math.ceil(5.1)) // 向上取整
console.log(Math.max(5,1,7)) // 去最大
console.log(Math.pow(8,2)) // 求幂
console.log(Math.abs(-5.1)) // 求绝对值
console.log(Math.random()) // 0-1 之间随机小数
console.log(parseInt(Math.random(0,1)*10+1)) // 1-10之间随机整数

// Date对象  月份从0开始
var d=new Data();
console.log(d.getFullYear()); // 获取年份
console.log(d.getMonth()+1); // 获取月份
console.log(d.getIime()); // 获取1970到现在的毫秒数
console.log(d.getDate()); // 获取日
console.log(d.getHours); // 获取小时
console.log(d.getMinutes); // 获取分钟 
console.log(d.getSeconds); // 获取秒 
console.log(d.getDay()); // 获取星期 星期天 0
console.log(d.getMilliseconds()); //获取这一秒之内的毫秒数
console.log(d.toString()); // 
console.log(d.toDateString()); //  Sun Apr 19 2020
console.log(d.toLocalString()); //2022/4/3 下午15:22:00

var d=new Data(2018,11,24,10,30,30,0);
var d=new Data(2018,0);
var d=new Data(0); // 设置毫秒数  1970年

// 字符串  
// str.length  str[0]  str.charAt(0)  返回指定下标的字符  
// str.charCodeAt(0) 返回指定下标的字符的unicode编码
// str.indexOf('china') 返回字符串中指定文本首次出现的位置 未找到返回-1
// str.indexOf('h', 3) 从第3个位置开始查找
// str.lastIndexOf('')   返回字符串中指定文本最后一次出现的位置
// str.search('')  返回指定字符的位置，不能设置第二个参数，然后指定字符可以是正则，indexOf不可以
// str.slice()  从下标开始截取字符
// str.replace('world', 'baby') 替换 返回新的字符串
// str.toUpperCase() 转换成大写
// str.toLowerCase() 转换成小写
// str.concat(str2)  字符串拼接
// str.trim()  去掉字符串前后空格
// str.trim().length 返回去除的数量
// str.split()  没有参数 返回由元字符组成的数组  有参数 返回一个间隔单个字符的数组

// DOM
// DOM最大的节点 document
        console.log(document)
        // html内部所有标签
        console.log(document.documentElement)
        console.log(document.head) // head
        console.log(document.body) // body
        console.log(document.title) // title

        document.title = 'yes';

        // DOM子节点 childNodes
        console.log(document.body.childNodes); // 返回NodeList 类数组
        console.log(document.body.childNodes.length);
        console.log(document.body.childNodes[1]);

        // 节点类型 
        /*
               元素节点  属性节点   文本节点    注释节点
        nodeType  1        2          3         8
        nodeName 元素名   属性值    #text       #comment
        nodeValue  null   属性值    文本值      # 注释内容
        */
        for(var i=0;i<document.body.childNodes.length;i++){
            console.log(document.body.childNodes[i].nodeType); //节点类型
            console.log(document.body.childNodes[i].nodeName); // 节点名称
            console.log(document.body.childNodes[i].nodeValue); // 节点值
            
        }
        // 返回元素子节点不包含文本和注释等等 HTMLCollection
        console.log(document.body.children); 
        // 返回元素子节点的长度
        console.log(document.body.childElementCount);
        // 判断是否有子节点
        console.log(document.body.hasChildNodes());
        // 返回第一个子节点(包含文本节点)
        console.log(document.body.firstChild);
        // 返回第一个元素子节点
        console.log(document.body.firstElementChild);
        // 父元素
        console.log(document.body.children[0].parentNode);
        console.log(document.body.children[0].parentElement);
        // 下一个兄弟 nextsibling 包含文本节点
        console.log(document.body.children[0].nextSibling);
        // 返回下一个元素兄弟节点
        console.log(document.body.children[0].nextElementSibling);
        // 返回 上一个节点 包含文本节点
        console.log(document.body.children[0].previousSibling);
        // 返回上一个元素节点
        console.log(document.body.children[0].previousElementSibling);
        // 返回一个集合 HTMLCollection
        console.log(document.getElementsByTagName('h2'));
        // 返回一个集合  
        console.log(document.getElementsByClassName('myH2'));
        // 返回元素
        console.log(document.getElementById('h2elle'));
        
        // 参数为css选择器 返回第一个元素
        var myh2 = document.querySelector('h2');
        // var cssa = document.querySeletor('div span');
        // 返回的是一个集合  NodeList
        var cssc = document.querySelectorAll('div');

        var btn=document.getElementById('btn');
        var btn2=document.getElementById('btn2');
        btn.onclick=function(){
            // 创建元素节点
            var newNode=document.createElement('h2');
            // 创建文本节点
            var newTextNode=document.createTextNode('我是document创建的'); 
            // 添加节点  父元素.appendChild(子元素)
            newNode.appendChild(newTextNode);
            box1.appendChild(newNode);
        }

        btn2.onclick=function(){
            var h2=box1.getElementsByTagName('h2');
            // 删除元素
            box1.removeChild(h2[0])
            box1.replaceChild(newNode, h2)
            // 在指定元素之前插入 insertBefore(新节点，指定节点)
            box1.insertBefore(newNode, h2)
            // 克隆节点
            var newH2=h2.cloneNode(); // 浅拷贝 只复制标签不复制内容
            var newH2=h2.cloneNode(true); // 深拷贝 复制标签和内容
            box1.appendChild(newH2)
        }

        console.log(myh2.attributes); // 返回 NameNodeMap 内部属性
        console.log(myh2.attributes[1]); // 返回 class='mybox' 属性节点
        console.log(myh2.attributes.class); // 返回 class='mybox' 属性节点
        console.log(myh2.attributes.class.nodeType); // 属性节点的类型

        console.log(myh2.getAttributeNode('class')); // 返回class='mybox' 属性节点
        console.log(myh2.getAttribute('class')); // 直接返回属性节点的值
        myh2.setAttribute('class', 'haha'); // 设置属性节点

        var btn=document.querySelector('#btn');
        var box=document.querySelector('#box');
        btn.onclick=function(){
            console.log(box.innerHTML); // 返回标签+内容 
            console.log(box.innerText); // 返回内容
        }
        box.innerHTML='<h4>我是傻逼</h4>'
        box.outerHTML='<p>我才是</p>' // 包含box节点本身
        box.outeText='<p>我才是</p>' // 包含box节点本身

        console.log(username.value); // 表单输入值
        box.innerHTML='<H2>'+username.value+'</H2>'
        username.value=''

        btn.onclick=function(){
            console.log(box.style.width); // 初始不能访问
            box.style.width='500px';
            box.style.marginLeft='10px';
        }

/* 传统事件绑定
        var btn1=document.querySelector('#btn1');
        btn1.onclick=function(){
            show()
        }*/

        // 现代事件绑定
        var btn1=document.querySelector('#btn1');
        // DOM浏览器支持的  btn1.addEventListener(事件类型，事件处理程序，布尔值可选)
        btn1.addEventListener('click',function(){
            console.log('我是现代事件绑定');
        })
        // IE浏览器 IE11以下
        btn1.attachEvent('onclick',function(){
            console.log(1);
        })
        if(document.addEventListener){
            // DOM浏览器
            var a=function(){
            }}
        else{
            seletor.attachEvent('on'+type,fn)
        }
        // 取消传统事件   跟事件参数一模一样
        btn1.onclick=null;

        // 取消现代事件       
        var fun=function(){
            console.log(1234);
        }
        btn1.removeEventListener('click',fn)

        btn1.attachEvent('onclick',fn)
        btn1.detachEvent('onclick',fn)

        // 事件流  事件的执行顺序 传播顺序
        // 1. 事件冒泡 IE
        // 2. 事件捕获 NetScape
        // 3. DOM事件流 就支持冒泡(默认) 也支持捕获

        // addEventListener第三个参数 false捕获从内到外 true捕获从外到内

        var btn=document.querySelector('button');
        var div=document.querySelector('div');
        var body=document.querySelector('body');
        btn.addEventListener('click', function(){
            alert('btn出发了')
        },true)
        div.addEventListener('click', function(){
            alert('div出发了')
            ev.cancelBubble=true; // 阻止事件冒泡 IE浏览器 DOM
            ev.stopPropagation(); // 阻止事件冒泡 DOM浏览器
        })

        body.addEventListener('click', function(){
            alert('body出发了')
        })

        // 事件event对象
        var eve = window.event;
        // event.button 返回当事件被触发时，哪个鼠标按钮被点击
        // event.clientX 返回当事件被触发时，鼠标指针的水平坐标
        // event.clientY 返回当事件被触发时，鼠标指针的垂直坐标
        // event.ctrlKey  返回当事件被触发时， ctrl键是否被按下
        // event.shiftKey 返回当事件被触发时，shift键是否被按下
        // event.metaKey 返回当事件被触时， meta键是否被按下
        // event.screenX 返回当事件被触发时，鼠标指针的水平坐标
        // event.screenY 返回当某个事件被触发时，鼠标指针的垂直坐标

        function showFn(){
            alert('我是事件')
            var ev=window.event || arguments[0]
            ev.preventDefault(); // 阻止默认行为 DOM浏览器
            ev.returnView=false; // 阻止默认行为 IE浏览器/DOM

        }

        // 键盘事件
        //<input type="text" onkeydown="downFn(this)" onkeypress="pressFn(this)" onkeyup="upFn(this)">
        // 输入字符的时候，三个事件都会执行  功能键 ctrl alt shift f1只会触发onkeydown和onkeyup
        /*
                    onkeydown(键盘编码)  onkeypress(字符编码)    onkeyup
                    keyCode  charCode   keyCode  charCode    keyCode  charCode
        字符例如a     65       0           97       97          
                A     65        0           65      65
        */
        function downFn(obj){
            var ev=window.event || arguments[0];
            console.log(ev, 'down')
        }

        function pressFn(obj){
            var ev=window.event || arguments[0];
            console.log(ev, 'press')
        }

        function upFn(obj){
            var ev=window.event || arguments[0];
            console.log(ev, 'up')
        }

        // 当整个网页(图片等资源)加载完成时 触发
        window.onload=function(){
            var box=document.getElementById('box');
            console.log(box);
        }

btn.onclick=function(){
            console.log(123456);
            // js引用变量值 用的是`` tab上面的引号 不是''
            myTab.innerHTML += `<tr> <td>${userName.value}</td> <td>${age.value}</td> <td>${phoneNumber.value}</td> <td><span class='del'>删除</span></td> </tr>`
            userName.value=''
            age.value=''
            phoneNumber.value=''
        }
        // 点击父元素的所有事件都会触发 判断子元素触发条件  事件代理
        // 优点： 提高性能 每一个函数都会占用内存空间，只需添加一个事件处理程序代理所有事件，所占用的内存空间更少
        // 动态监听： 停用事件委托可以自动绑定动态添加的元素，即新增的节点不需要主动添加也可以一样具有和其他元素一样的事件        myTab.onclick=function(){
            var e=window.event || arguments[0];
            var target=e.target;
            if(target.className=='del'){
                target.parentNode.parentNode.remove()
            }


BOM 浏览器对象模型
// 浏览器 的位置 和大小信息
        console.log(window);
        console.log(window.screenLeft); // 窗口在屏幕的位置
        console.log(window.screenX); // 窗口在屏幕的位置
        console.log(window.outerWidth); // 浏览器的外观大小
        console.log(window.innerWidth); // 浏览器的内部大小 呈现网页视图的大小
        console.log(window.screen);  // 屏幕信息
        console.log(document.documentElement.clientWidth); // 文档的宽度

        // 打开窗口
        function openWind(){
            window.open('web笔记.md', 'newwindow', 'height=400px, width=400, top=0, left=0,screenX=200,screenY=200,toolbar=no,menubar=no,resizable=no,location=no,status=no');
            
        }
        // 关闭窗口
        function closeWind(){
            window.close();
        }
        // window的地址栏的信息
        console.log(window.location);

        // 历史记录
        console.log(window.history);
        history.forward() // 下一页
        history.go(0) // 当前页
        history.go(-1) // 上一页
        history.go(-2) // 上二页

        // 浏览器版本信息
        console.log(window.navigator.userAgent);

var btn=document.querySelector('button');
        var box=document.querySelector('.box');
        var closeTimeout=document.querySelector('#closeTimeout');
        var timeerID1=null;
        // 返回的是一个数字 定时器的序号
        btn.onclick=function(){
            var _this=this  // 保存this的指针
            timeerID1 = setTimeout(function(){
                box.innerHTML='开启了'
                console.log(_this);
            },2000)
        }
        closeTimeout.onclick=function(){
            // 清除定时器
            clearTimeout(timeerID1);
        }

        // setInterVal(回调函数，间隔时间)  
        // 最小间隔 4ms  定时器内部this对象是window 不是上层标签 可保存指针
        var timeID = setInterval(function(){
            num ++
            box.innerHTML = num
            if(num>=10){
                clearInterval(timeID);
            }
        },1000)

        btn2.onclick=function(){
            clearInterval(timeID);
        }

var backup=document.querySelector('.backup');
        var timeId=null
        var toTop=0
        backup.onclick=function(){
            toTop=document.documentElement.scrollTop
            // console.log(document.documentElement.scrollTop); // 网页被卷去的部分
            move()
        }
        function move(){
            timeId = setInterval(function(){
                if(document.documentElement.scrollTop<=0 || document.documentElement.scrollTop != toTop){
                    clearInterval(timeId)
                }
                else{
                    document.documentElement.scrollTop=document.documentElement.scrollTop - 10
                }
                toTop=document.documentElement.scrollTop // 定时器每次移动的距离
            },30)
        }

        window.onwheel=function(){
            clearInterval(timeId)
        }
        
        window.scrollY //c只能获取 每次浏览器y的值
        window.scrollTo(0,window.scrollY-10)

轮播图
<style>
        *{
            margin: 0;
            padding: 0;
        }
        li{
            list-style: none;
        }
        .slide{
            width: 600px;
            height: 300px;
            margin: 10px auto;
            border:1px solid #000;
            position: relative;
            overflow: hidden;
        }
        .slide ul{
            width: 500%;
            height: 300px;
        }
        .slide ul li{
            width: 600px;
            height: 300px;
            float: left;
        }
        .red{
            background-color: deeppink;
        }
        .blue{
            background-color: deepskyblue;
        }
        .yellow{
            background-color: yellow;
        }
        .gray{
            background-color: gray;
        }
        .green{
            background-color: green;
        }

        .arrowLeft,.arrowRight{
            width: 30px;
            height: 50px;
            background-color: #000;
            position: absolute;
            top: calc(50% - 25px);
        }
        .arrowLeft{
            left: 0;
        }
        .arrowRight{
            right: 0;
        }
    </style>
</head>

<body>
    <div class="slide">
        <ul>
            <li class="red">1</li>
            <li class="green">2</li>
            <li class="blue">3</li>
            <li class="yellow">4</li>
            <li class="gray">5</li>
        </ul>
        <div class="arrowLeft"></div>
        <div class="arrowRight"></div>
    </div>

    <script>
        var slide=document.querySelector('.slide')
        var slideUl=document.querySelector('.slide ul')
        var item=document.querySelectorAll('.slide li')
        var arrowLeft=document.querySelector('.arrowLeft')
        var arrowRight=document.querySelector('.arrowRight')
        function init(){
            var firstCopy=item[0].cloneNode(true);
            var lastCopy=item[4].cloneNode(true);
            slideUl.style.width='700%'
            slideUl.style.left='-600px'
            slideUl.appendChild(firstCopy);
            slideUl.insertBefore(lastCopy,item[0])
        }
        init()
        var timerID=null
        arrowRight.addEventListener('click',function(){
            slideUl.style.left=parseInt(slideUl.style.left)-600+'px'
            slideUl.style.transition='0.3s'
            if(parseInt(slideUl.style.left)<-3600){
                slide.style.left='-600px'
                slideUl.style.transition='0s'
                timerID=setInterval(function(){
                    slideUl.style.left='-1200px'
                    slideUl.style.transition='0.3s'
                    clearInterval(timerID)
                },16)
            }
        })
    </script>

ajax
可以无需刷新页面而与服务器端进行通信
允许你根据用户事件来更新部分页面

const btn=document.getElementsByTagName('button')[0];
        const result=document.getElementById('result');
        // 绑定事件
        btn.onclick=function(){
            // 1. 创建对象
            const xhr = new XMLHttpRequest();
            // 2. 初始化
            xhr.open('GET', 'http://127.0.0.1:8000/server?a=100&&b=200');
            // 3. 发送
            xhr.send();
            // 4. 事件绑定 处理服务端返回的结果
            // on  when 当...时候
            // readystate 是 xhr 对象中的属性 表示状态 0 1  2 3 4
            // change  改变
            xhr.onreadystatechange = function(){
                // 判断
                if(xhr.readyState == 4){
                    // 判断响应状态码
                    if(xhr.status>=200 && xhr.status<300){
                        // 处理结果   行  头  空行  体
                          //1. 响应行
                        //   console.log(xhr.status); // 状态码
                        //   console.log(xhr.statusText); // 状态字符串
                        //   console.log(xhr.getAllResponseHeaders()); //所有响应头
                        //   console.log(xhr.response); // 响应体

                        // 设置result的文本
                        result.innerHTML = xhr.response;
                    }
                    else{
                        
                    }
                }
        }

<script>
        const result = document.getElementById('result');
        result.addEventListener('mouseover', function(){
            //1. 创建对象
            const xhr=new XMLHttpRequest();
            // 设置响应体数据类型  json ...
            xhr.responseType = 'json';

            // 超时设置 2s 设置
            xhr.timeout = 2000;
            // 超时回调
            xhr.ontimeout= function(){
                alert('网络异常，请稍后重试')
            }
            // 网络异常回调
            xhr.onerror = function(){
                alert('网络出现问题')
            }

            // 2. 初始化 设置类型与url
            xhr.open('POST', 'http://127.0.0.1:8000');
            // 针对IE缓存 ajax ie先缓存后实时
            // xhr.open('POST', 'http://192.168.1:8000/ie?t='+Data.now());
            
            // 设置请求头
            xhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded')
            
            // 3. 发送
            xhr.send('a=100&b=200&c=300')
            
            // 4. 事件绑定
            xhr.onreadystatechange=function(){
                // 判断
                if(xhr.readyState==4){
                    if(xhr.status>=200 && xhr.status<300){
                        // 处理服务端返回的结果
                        result.innerHTML = xhr.response;
                    }
                }
            }
        })

        const btns = document.querySelectorAll('button');
        let x=null;
        btns[0].onclick=function(){
            x = new XMLHttpRequest();
            x.open('GET', 'http://127.0.0.1:8000/delay');
            x.send();
        }
        // abort 取消ajax请求
        btns[1].onclick=function(){
            x.abort();
        }

        // 标识变量
        let isSending = false; // 是否正在发送ajax请求

        btns[0].onclick=function(){
            // 判断标识变量
            if(isSending) x.abort(); // 如果正在发送，则取消该请求,否则创建一个新的请求
            x = new XMLHttpRequest();
            // 修改 标识变量的值
            isSending = true;
            x.open('GET',' http://127.0.0.1:8000/delay');
            x.send();
            x.onreadystatechange=function(){
                if(x.readyState==4){
                    // 修改标识变量
                    isSending = false;
                }
            }
        }
        // jquery 实现ajax
        $('button').eq(0).click(function(){
            $.get('http://127.0.0.1:8000/jquery-server',{a:100,b:200}, function(){
                console.log(data);
            },'json');
        })



        $('button').eq(2).click(function(){
            $.ajax({
                url: 'http://127.0.0.1:8000/jquery-server',
                data:{a:100, b:200},
                type:'GET',
                // 响应体结果
                dataType: 'json',
                success: function(data){
                    console.log(data);
                },
                timeout: 2000,
                error: function(){
                    console.log('出错啦');
                },
                // 头信息
                headers:{
                    c:300,
                    d:400
                }
            });
        })
    </script>

// axios实现ajax  axios.get()   axios(){}  fetch() 函数实现
        const btns= document.querySelectorAll('button');
        btns[0].onclick=function(){
            // GET请求
            axios.get('heep://127.0.0.1:8000/axios-server',{
                // url参数
                params:{
                    id:100,
                    vip:7
                },
                // 请求头信息
                headers:{
                    name:'yanyan',
                    age:20
                }
            });
        }

同源策略：
    协议，域名，端口号必须完全相同 违背就是跨域

如何解决跨域：
    JSONP 利用script标签的跨域能力来发送请求的  服务端返回函数  前端定义函数
    const inpurt = documetn.querySelector('input');
    // 声明handle函数
    function handle(data){
        input.style.border="solid 1px #000"
        p.innerHtml = data.msg;
    }
    input.onblur = function(){
        // 获取用户的输入值
        let username = this.value;
        // 向服务器端发送请求 检测用户名是否存在
        // 1 创建script标签
        const script= document.createElement('script');
        //2. 设置标签的src属性
        script.src='http://127.0.0.1:8000/check-name';
        //3. 将script插入到文档中
        document.body.appendChild(script);
    }

    JSONP 利用jquery实现ajax  url地址后加?callback=?
    $('button').eq(0).click(function(){
        $.getJson('http://127.0.0.1:8000/jquery-jsonp-server?callback=?', function(data){
            $('#result').html(`
                名称:$(data.name),
                校区:$(data.city)
            `)
        })
    });

    CORS 实现ajax  
    通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应后就会对响应放行


http
请求报文：重点是格式与参数
    行： GET  /  URL  / HTTP:/1.1(版本)
    头： Host: atguigu.com
         Cookie: name=guigu
         Content-Type: application/x-www-form-urlencoded
         User-Agent: chrome 83
    空行：
    体： username=admin&password=admin


响应报文： 
    
 行：   HTTP/1.1 200 OK
 头：   Content-Type:text/html;charset=utf-8
        Content-length:2456
        Content-encoding: gzip
空行
体   <html>
        <head>
        </head>
        <body>
            ...
    

jquery对象就是jquery包装dom对象后产生的对象, 如果一个对象是jquery对象，
$("#i1").html()  获取id值为i1的元素的html代码  html() 是jquery里的方法
document.getElementById("i1").innerHtml;
$("i1").html();
$("#i1")[0].innerHtml;

jquery选择器
$(selector).action()
$("#id")  $("tagName") $(".classname")  $("div.c1")  $("*") $("#id, .classname, tagName")

$("x  y") x的所有后代y  $("x > y") x的所有儿子y  $("x + y") 所有紧挨在x后面的y $("x ~ y") x之后的所有兄弟y

:first :last  :eq(index)  :even 匹配所有索引值为偶数的元素  :odd 匹配所有索引值为奇数的元素
:gt(index) 匹配所有大于给定索引值的元素  :lt(index) 匹配所有小于给定索引值的元素
:not(元素选择器)  移除所有满足not条件的标签
:has(元素选择器)  选取所有包含一个多个标签在内(后代)的标签

[attribute]  [attribute=value] 属性等于 [attribute!=value]  属性不等于

$("input[type='checkbox']");   $("input[type!='text']")

表单筛选器
:text  :password  :file  :radio  :checkbox   :submit  :reset  :button

$(":checkbox")    找到所有的checkbox

表单对象属性
:enabled  :disabled  :checked  :selected

<form>
  <input name="email" disabled="disabled" />
  <input name="id" />
</form>
$("input:enabled") 找到可用的input标签

<select id="s1">
  <option value="beijing">北京市</option>
  <option value="shanghai">上海市</option>
  <option selected value="guangzhou">广州市</option>
  <option value="shenzhen">深圳市</option>
</select>
$(":selected")  找到所有被选中的option

筛选器方法
$("#id").next()
$("#id").nextAll()
$("#id").nextUntil("#i2")
$("#id).prev()
$("#id).prevAll()
$("#id).prevUntil("#i2)
$("#id).parent()
$("#id).parents() 查找当前元素的所有的父辈元素
$("#id").parentsUntil() 查找当前元素的所有父辈元素，直到遇到匹配的那个元素
$("#id).children()  儿子们
$("#id).siblings()  兄弟们

$("div").find("p") 查找  搜素所有与指定表达式匹配的元素
$("div").filter(".c1")  筛选  与指定表达式匹配的元素集合 从结果集中过滤出有c1样式类的

.first()  .last()  .not()  .has() .eq() 

样式操作
    addClass()  添加指定的css类名
    removeClass()  移除指定的css类名
    hasClass()  判断样式存不存在
    toggleClass()  切换css类名，如果有就移除，如果没有就添加

    css("color", "red") 
    $("p").css("color", "red")  将所有p标签的字体设置为红色

    offset() 获取匹配元素在当前窗口的相对偏移或设置元素位置
    position()  获取匹配元素相对父元素的偏移
    scrollTop()  获取匹配元素相对滚动条顶部的偏移
    scrollLeft()  获取匹配元素相对滚动条左侧的偏移

height()  width()  innerHeight()  innerWidth() outerHeight() outerWidth()

html() 获取第一个匹配元素的html内容
html(val)  设置所有匹配元素的html内容

text()  取得所有匹配元素的内容
text(val)  设置所有匹配元素的内容

val()  取得第一个匹配元素的当前值
val(val)  设置所有匹配元素的值
val([val1, val2])  设置多选的checkbox 多选select的值

属性操作：
    attr(attrName) 返回第一个匹配元素的属性值
    attr(attrName, attrValue)  为所有匹配元素设置一个属性值
    attr({k1:v1, k2:v2})  设置多个属性值
    removeAttr()  从每一匹配的元素中删除一个属性

    用于checkbox和radio  prop()  获取属性  removeProp()  移除属性

    对于标签上有的能看到的属性和自定义属性都用attr
    对于返回布尔值的比如checkbox，radio，option的是否被选中都用prop

添加到指定元素内部的后面
$(A).append(B) 把B追加到A  $(A).appendTo(B) 把A追加到B

添加到指定元素内部的前面
$(A).prepend(B)  把B前置到A
$(A).prependTo(B)  把A放到B的后面

添加到指定元素外部的后面
$(A).after(B)  把B放到A的后面
$(A).insertAfter(B)  把A放到B的后面

添加到指定元素外部的前面
$(A).before(B)  把B放到A的前面
$(A)
.insertBefore(B)  把A放到B的前面

remove()   empty()  删除  删除元素集合所有的子节点

replaceWith() replaceAll() 替换
clone() 克隆  flase 只克隆标签不克隆所带事件  true 都克隆


常用事件
    click(function(){})
    hover(function(){})
    blur(function(){})
    focus(function(){})
    change(function(){})
    keyup(function(){})

事件绑定
    .on( events [, selector], function(){})
    events 事件  selector 选择器(可选)  function 处理函数

    .off( events [, selector ][, function(){}])
    移除事件  off()方法移除用.on()绑定事件处理程序

    return false; 常见阻止表单提交等
    e.preventDefault();  阻止后续事件执行

页面载入：
    $doucment.ready(function(){
        js代码
    })

    $(function(){
        js代码
    })

    与window.onload区别
    window.onload()函数有覆盖现象，必须等待图片资源加载完成才能调用
    jquery函数没有函数覆盖现象，文档加载完成之后就可以调用

事件委托：
    $("table").on("click", ".delete", funtion(){
        删除按钮绑定的事件
    })

each() 迭代对象和数组 
list = [10,20,30,40]
$.each(li, function(i, v){
    console.log(i, v);
})

.each(function(index, element)) 遍历jquery对象，为每个匹配元素执行一个函数
$("li").each(function(){
    $(this).addClass("c1);
});

遍历过程中可以使用return false提前结束循环

.data() 在元素的所有存储任意相关数据或返回匹配的元素集合中的第一个元素的给定名称的数据存储的值

.data(key, value) $("div").data("k", 100); 给所有div标签都保存一个k=100
$("div").data("k") 返回第一个div标签中保存的k值

.removeData(key)  $("div").removeData("k");  移除元素上存放k对应的数据
